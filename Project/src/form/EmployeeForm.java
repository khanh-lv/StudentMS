/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form;

import entity.Account;
import entity.Employee;
import entity.Role;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

/**
 *
 * @author khanh
 */
public class EmployeeForm extends javax.swing.JFrame {

    /**
     * Creates new form EmployeeForm
     */
    public EmployeeForm() {
        initComponents();
    }

    public EmployeeForm(Employee e) {
        initComponents();
        this.setDefaultCloseOperation(HIDE_ON_CLOSE);
        employee = e;
        try {
            loadCombobox();
            if (employee != null) {
                try {
                    txtEmpNum.setText(employee.getEmployeenum());
                    txtAddress.setText(employee.getAddress());
                    txtEmail.setText(employee.getEmail());
                    txtPhone.setText(employee.getPhoneNo());
                    txtName.setText(employee.getFullname());
                    txtUser.setText(employee.getAccount().getUsername());
                    txtUser.setEditable(false);
                    txtPass.setText(employee.getAccount().getPassword());
                    cbxGender.setSelectedItem(employee.getGender());
                    cbxRole.setSelectedItem(employee.getAccount().getRole().getRole());
                    DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
                    Date birthDate = df.parse(employee.getBirthdate());
                    jBirthDate.setDate(birthDate);
                    txtEmpNum.setEnabled(false);
                    txtAddress.setEnabled(false);
                    txtName.setEnabled(false);
                    txtEmail.setEnabled(false);
                    txtPhone.setEnabled(false);
                    txtUser.setEnabled(false);
                    txtPass.setEnabled(false);
                    cbxGender.setEnabled(false);
                    cbxRole.setEnabled(false);
                    jBirthDate.setEnabled(false);
                    btnSave.setEnabled(false);
                    btnClose.setEnabled(false);
                    btnReset.setEnabled(false);
                } catch (ParseException ex) {
                    JOptionPane.showMessageDialog(null, "Không thể convert dữ liệu thành công", "Mesage", JOptionPane.ERROR_MESSAGE);
                    System.err.println(ex.getMessage());
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Có lỗi xảy ra khi thực hiện truy vấn. Vui lòng kiểm tra lại", "Mesage", JOptionPane.ERROR_MESSAGE);
            System.err.println(ex.getMessage());
        }

    }

    public EmployeeForm(Account account, Employee employee) {
        initComponents();
        this.account = account;
        this.employee = employee;
        try {
            loadCombobox();
            if (employee != null) {
                try {
                    txtEmpNum.setText(employee.getEmployeenum());
                    txtAddress.setText(employee.getAddress());
                    txtEmail.setText(employee.getEmail());
                    txtPhone.setText(employee.getPhoneNo());
                    txtName.setText(employee.getFullname());
                    txtUser.setText(employee.getAccount().getUsername());
                    txtUser.setEditable(false);
                    txtPass.setText(employee.getAccount().getPassword());
                    cbxGender.setSelectedItem(employee.getGender());
                    cbxRole.setSelectedItem(employee.getAccount().getRole().getRole());
                    DateFormat df = new SimpleDateFormat("dd-MM-yyyy");
                    Date birthDate = df.parse(employee.getBirthdate());
                    jBirthDate.setDate(birthDate);
                } catch (ParseException ex) {
                    JOptionPane.showMessageDialog(null, "Không thể convert dữ liệu", "Mesage", JOptionPane.ERROR_MESSAGE);
                    System.err.println(ex.getMessage());
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Có lỗi xảy ra khi thực hiện truy vấn. Vui lòng kiểm tra lại", "Mesage", JOptionPane.ERROR_MESSAGE);
            System.err.println(ex.getMessage());
        }

    }
    private Account account;
    private Employee employee;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        txtEmpNum = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        jBirthDate = new com.toedter.calendar.JDateChooser();
        cbxGender = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAddress = new javax.swing.JTextArea();
        txtEmail = new javax.swing.JTextField();
        txtPhone = new javax.swing.JTextField();
        txtUser = new javax.swing.JTextField();
        txtPass = new javax.swing.JPasswordField();
        cbxRole = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Employee form");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Nhập Thông Tin Sinh Viên", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        jLabel1.setText("Mã nhân viên");

        jLabel2.setText("Họ tên");

        jLabel3.setText("Ngày sinh");

        jLabel4.setText("Giới tính");

        jLabel5.setText("Địa chỉ");

        jLabel6.setText("Email");

        jLabel7.setText("Số điện thoại");

        jLabel8.setText("Username");

        jLabel9.setText("Password");

        jLabel10.setText("Role");

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        cbxGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nam", "Nữ" }));

        txtAddress.setColumns(20);
        txtAddress.setRows(5);
        jScrollPane1.setViewportView(txtAddress);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtPass)
                            .addComponent(txtUser, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtPhone, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtEmail, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                            .addComponent(cbxGender, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jBirthDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtName, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtEmpNum, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cbxRole, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(btnSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                        .addComponent(btnReset)
                        .addGap(61, 61, 61)
                        .addComponent(btnClose)
                        .addGap(34, 34, 34))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(25, 25, 25))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jBirthDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtEmpNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addGap(16, 16, 16)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cbxGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                        .addGap(108, 108, 108))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(cbxRole, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        EmployeeManagerForm employeeManagerForm = new EmployeeManagerForm(account);
        employeeManagerForm.setVisible(true);
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (validation()) {
            if (employee != null) {
                try {
                    employee.setEmployeenum(txtEmpNum.getText());
                    employee.setFullname(txtName.getText());
                    employee.setAddress(txtAddress.getText());
                    employee.setEmail(txtEmail.getText());
                    employee.setPhoneNo(txtPhone.getText());
                    employee.setGender(cbxGender.getSelectedItem().toString());
                    SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
                    String birthDate = sdf.format(jBirthDate.getDate());
                    employee.setBirthdate(birthDate);
                    employee.getAccount().setUsername(txtUser.getText());
                    employee.getAccount().setPassword(txtPass.getText());
                    employee.getAccount().setRole(Role.getRole(cbxRole.getSelectedItem().toString()));
                    if (Employee.update(employee) && Account.update(employee.getAccount())) {
                        JOptionPane.showMessageDialog(null, "Update thành công", "Message", JOptionPane.INFORMATION_MESSAGE);
                        EmployeeManagerForm employeeManagerForm = new EmployeeManagerForm(account);
                        employeeManagerForm.setVisible(true);
                        this.setVisible(false);
                    } else {
                        JOptionPane.showMessageDialog(null, "Update thất bại", "Message", JOptionPane.WARNING_MESSAGE);
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Có lỗi xảy ra khi thực hiện truy vấn. Vui lòng kiểm tra lại", "Mesage", JOptionPane.ERROR_MESSAGE);
                    System.err.println(ex.getMessage());
                }

            } else {
                employee = new Employee();
                try {
                    employee.setEmployeenum(txtEmpNum.getText());
                    employee.setFullname(txtName.getText());
                    employee.setAddress(txtAddress.getText());
                    employee.setEmail(txtEmail.getText());
                    employee.setPhoneNo(txtPhone.getText());
                    employee.setGender(cbxGender.getSelectedItem().toString());
                    SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
                    String birthDate = sdf.format(jBirthDate.getDate());
                    employee.setBirthdate(birthDate);
                    if (!Account.isExist(txtUser.getText())) {
                        Account newAccount = new Account(txtUser.getText(), txtPass.getText(), Role.getRole(cbxRole.getSelectedItem().toString()));
                        if (Account.insert(newAccount) != null) {
                            employee.setAccount(newAccount);
                            if (!Employee.isExist(employee.getEmployeenum())) {
                                if (Employee.insert(employee) != null) {
                                    JOptionPane.showMessageDialog(null, "Thêm nhân viên mới thành công", "Message", JOptionPane.INFORMATION_MESSAGE);
                                    resetForm();
                                    employee = null;
                                } else {
                                    JOptionPane.showMessageDialog(null, "Thêm nhân viên mới thất bại", "Message", JOptionPane.WARNING_MESSAGE);
                                    Account.delete(employee.getAccount());
                                    employee = null;
                                    
                                }
                            } else{
                                JOptionPane.showMessageDialog(null, "Mã nhân viên đã tồn tại. Vui lòng sửa lại", "Message", JOptionPane.WARNING_MESSAGE);
                                Account.delete(employee.getAccount());
                                employee = null;
                                
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Thêm tài khoản thất bại", "Message", JOptionPane.WARNING_MESSAGE);
                            employee = null;
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Tài khoản đăng nhập đã tồn tại. Vui lòng sửa lại", "Message", JOptionPane.WARNING_MESSAGE);
                        employee = null;
                    }

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Có lỗi xảy ra khi thực hiện truy vấn. Vui lòng kiểm tra lại", "Mesage", JOptionPane.ERROR_MESSAGE);
                    System.err.println(ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        resetForm();
    }//GEN-LAST:event_btnResetActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmployeeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmployeeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmployeeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmployeeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmployeeForm().setVisible(true);
            }
        });
    }

    private void loadCombobox() throws SQLException {
        cbxRole.removeAllItems();
        for (Role role : Role.getAllRole()) {
            cbxRole.addItem(role.getRole());
        }
    }

    private void resetForm() {
        txtEmpNum.setText("");
        txtEmail.setText("");
        txtAddress.setText("");
        txtName.setText("");
        txtPhone.setText("");
        txtUser.setText("");
        txtPass.setText("");
        cbxGender.setSelectedIndex(0);
        cbxRole.setSelectedIndex(0);
        jBirthDate.setDate(null);
    }

    private boolean validation() {
        if (txtEmpNum.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập đầy đủ thông tin", "Message", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        if (txtName.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập đầy đủ thông tin", "Message", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        if (txtAddress.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập đầy đủ thông tin", "Message", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        if (txtEmail.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập đầy đủ thông tin", "Message", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        if (txtPhone.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập đầy đủ thông tin", "Message", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        if (cbxGender.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn giới tính", "Message", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        if (cbxRole.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn lớp", "Message", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        if (jBirthDate.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn ngày sinh", "Message", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        if (txtUser.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập đầy đủ thông tin", "Message", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        if (txtPass.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập đầy đủ thông tin", "Message", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        if (txtEmpNum.getText().length() > 15) {
            JOptionPane.showMessageDialog(null, "mã nhân viên không vượt quá 15 ký tự", "Message", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        if (txtName.getText().length() > 50) {
            JOptionPane.showMessageDialog(null, "họ tên nhân viên không vượt quá 50 ký tự", "Message", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        if (txtEmail.getText().length() > 255) {
            JOptionPane.showMessageDialog(null, "email không vượt quá 255 ký tự", "Message", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        if (txtAddress.getText().length() > 255) {
            JOptionPane.showMessageDialog(null, "Địa chỉ không vượt quá 255 ký tự", "Message", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        if (txtPhone.getText().length() > 15) {
            JOptionPane.showMessageDialog(null, "số điện thoại không vượt quá 15 ký tự", "Message", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        if (txtUser.getText().length() > 50) {
            JOptionPane.showMessageDialog(null, "username không vượt quá 50 ký tự", "Message", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        if (txtPass.getText().length() > 15) {
            JOptionPane.showMessageDialog(null, "pasword không vượt quá 15 ký tự", "Message", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        if (!Pattern.matches("[0-9]{10,15}", txtPhone.getText())) {
            JOptionPane.showMessageDialog(null, "số điện thoại chỉ gồm các ký tự 0-9", "Message", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        String emailRegex = "^[a-z][a-z0-9_\\.]{5,32}@[a-z0-9]{2,}.[a-z]{2,4}.[a-z]{2,4}";
        if (!Pattern.matches(emailRegex, txtEmail.getText())) {
            JOptionPane.showMessageDialog(null, "email nhập vào không đúng định dạng", "Message", JOptionPane.WARNING_MESSAGE);
            return false;
        }

        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> cbxGender;
    private javax.swing.JComboBox<String> cbxRole;
    private com.toedter.calendar.JDateChooser jBirthDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtAddress;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtEmpNum;
    private javax.swing.JTextField txtName;
    private javax.swing.JPasswordField txtPass;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables
}
